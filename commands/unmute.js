const { SlashCommandBuilder, PermissionsBitField, EmbedBuilder } = require('discord.js');module.exports = {    data: new SlashCommandBuilder()        .setName('unmute')        .setDescription('Unmutes a member in the server.')        .addUserOption(option =>            option.setName('target')                .setDescription('The member to unmute')                .setRequired(true))        .addStringOption(option =>            option.setName('reason')                .setDescription('Reason for the unmute')                .setRequired(false)),    async execute(interaction, config) {        const memberToUnmute = interaction.options.getMember('target');        const reason = interaction.options.getString('reason') || '没有提供理由 (No reason provided)';        if (!interaction.member.permissions.has(PermissionsBitField.Flags.ModerateMembers)) {            return interaction.reply({                content: "🚫 抱歉，亲爱的，你没有解除禁言成员的权限。(Sorry, my dear, you don't have permission to unmute members.)",                ephemeral: true            });        }        if (!interaction.guild.members.me.permissions.has(PermissionsBitField.Flags.ModerateMembers)) {            return interaction.reply({                content: "😥 我没有足够的权限来解除禁言成员。(I don't have enough permissions to unmute members.)",                ephemeral: true            });        }        if (memberToUnmute.isCommunicationDisabled()) {            return interaction.reply({                content: "该用户未被禁言。(This user is not muted.)",                ephemeral: true            });        }        try {            await memberToUnmute.timeout(null, reason);            const unmuteEmbed = new EmbedBuilder()                .setColor('#00FF00')                .setTitle('🔊 Member Unmuted')                .setDescription(`${memberToUnmute.user.tag} has been unmuted.`)                .addFields(                    { name: 'Unmuted User (被解除禁言用户)', value: `${memberToUnmute.user.tag} (${memberToUnmute.id})`, inline: true },                    { name: 'Moderator (管理员)', value: interaction.user.tag, inline: true },                    { name: 'Reason (理由)', value: reason }                )                .setTimestamp()                .setFooter({ text: `Server: ${interaction.guild.name}` });            await interaction.reply({ embeds: [unmuteEmbed] });
            console.log(`${interaction.user.tag} unmuted ${memberToUnmute.user.tag} for: ${reason}.`);

            // Send log to moderation channel
            if (config.MOD_LOG_CHANNEL_ID) {
                const logChannel = interaction.guild.channels.cache.get(config.MOD_LOG_CHANNEL_ID);
                if (logChannel) {
                    const logEmbed = new EmbedBuilder()
                        .setColor('#00FF00')
                        .setTitle('🔊 Member Unmuted (日志)')
                        .setDescription(`${memberToUnmute.user.tag} has been unmuted.`)
                        .addFields(
                            { name: 'Unmuted User (被解除禁言用户)', value: `${memberToUnmute.user.tag} (${memberToUnmute.id})`, inline: true },
                            { name: 'Moderator (管理员)', value: interaction.user.tag, inline: true },
                            { name: 'Reason (理由)', value: reason }
                        )
                        .setTimestamp()
                        .setFooter({ text: `User ID: ${memberToUnmute.id}` });
                    logChannel.send({ embeds: [logEmbed] }).catch(console.error);
                }
            }            try {                await memberToUnmute.send(`你已被解除禁言于服务器 **${interaction.guild.name}**。
理由：${reason}`);            } catch (dmError) {                console.warn(`Could not DM ${memberToUnmute.user.tag} about their unmute: ${dmError}`);            }        } catch (error) {            console.error(`Error unmuting member ${memberToUnmute.user.tag}:`, error);            if (interaction.replied || interaction.deferred) {                await interaction.followUp({ content: "执行解除禁言操作时发生错误。(An error occurred while trying to unmute the member.)", ephemeral: true });            } else {                await interaction.reply({ content: "执行解除禁言操作时发生错误。(An error occurred while trying to unmute the member.)", ephemeral: true });            }        }    },};